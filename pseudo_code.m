%% State and measurement sizes
pose_size = 3;
lmk_size = 2;

%
num_poses = 3;
num_lmks = 4;

torad = pi/180;

%
factor{1+ 0} = struct(...
    'type', 'pose',...
    'measurement', [0.0; 0.0; 0.0],...
    'covariance', 1e-3*eye(3, 3),...
    'index', 0);

factor{1+ 1} = struct(...
    'type', 'motion',...
    'measurement', [1.0; 0.0; -5*torad],...
    'covariance', diag([1e-2, 1e-2, (2*torad)^2]),...
    'index', [0, 1]);

factor{1+ 2} = struct(...
    'type', 'motion',...
    'measurement', [1.05; -0.05; -3*torad],...
    'covariance', diag([1e-2, 1e-2, (2*torad)^2]),...
    'index', [1, 2]);

factor{1+ 3} = struct(...
    'type', 'lmk',...
    'measurement', [1.2; torad*40],...
    'covariance', diag([1e-2, (10*torad)^2]),...
    'index', [0, 3]);

states{1+ 0} = struct(...
    'type', 'pose',...
    'range', [1; 2; 3],...
    'value', [0.0; 0.0; 0.0]);

states{1+ 1} = struct(...
    'type', 'pose',...
    'range', [4; 5; 6],...
    'value', [0.0; 0.0; 0.0]);

states{1+ 2} = struct(...
    'type', 'pose',...
    'range', [7; 8; 9],...
    'value', [0.0; 0.0; 0.0]);

states{1+ 3} = struct(...
    'type', 'lmk',...
    'range', [10; 11],...
    'value', [0.0; 0.0]);

states{1+ 4} = struct(...
    'type', 'lmk',...
    'range', [12; 13],...
    'value', [0.0; 0.0]);

states{1+ 5} = struct(...
    'type', 'lmk',...
    'range', [14; 15],...
    'value', [0.0; 0.0]);

states{1+ 6} = struct(...
    'type', 'lmk',...
    'range', [16; 17],...
    'value', [0.0; 0.0]);

dx = ones(17, 1) * 1e6;
eps = 1e-6

while norm(dx) > eps
    
    [A, r] = buildproblem(states, factor);
    dx = solvelinearized(A, r);
    
    states = updatestates(states, dx);
    
    drawmap(states);
    
end